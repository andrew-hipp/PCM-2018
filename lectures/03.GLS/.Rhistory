t(s$u) %*% X %*% s$v
?svd
t(s$u) %*% tr.v %*% s$v
D = t(s$u) %*% tr.v %*% s$v
d %*% tr.v %*% solve(d)
D %*% tr.v %*% solve(D)
tr.v
args(svd)
tr.d <- svd(tr.v, 5, 5)
tr.d
tr.d$u - tr.d$v
tr.d$u %*% tr.v %*% solve(tr.d$u)
svd(tr.v)
args(svd)
tr.d$u
tr.d$u %*% solve(tr.d$u)
tr.v %*% solve(tr.v)
trace(1:4)
tr
??trace
?daig
?diag
diag(1:5
)
diat(tr.d$d) %*% tr.v %*% solve(diag(tr.d$d))
diag(tr.d$d) %*% tr.v %*% solve(diag(tr.d$d))
tr.v
diag(tr.d$u %*% tr.d$d) %*% tr.v %*% solve(diag(tr.d$d))
diag(tr.d$u * tr.d$d) %*% tr.v %*% solve(diag(tr.d$d))
diag(tr.d$u * tr.d$d) %*% tr.v %*% solve(tr.d$u * diag(tr.d$d))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
plot(tr)
tr <- sim.bdtree(n = 5)
plot(tr)
tr <- sim.bdtree(n = 5)
plot(tr)
tr <- sim.bdtree(n = 5)
plot(tr)
tr <- sim.bdtree(n = 5)
plot(tr)
dput(tr)
tr <- reorder(tr, 'postorder')
tr.orig <- tr
tr$node.label = sort(unique(tr$edge[, 1]))
row.names(tr$edge) = paste('V',1:dim(tr$edge)[1], sep = '')
tr
plot(tr)
dput(tr)
tr <- structure(list(edge = 
                    structure(c(9L, 9L, 8L, 8L, 7L, 7L, 6L, 6L, 3L, 4L, 1L, 2L, 8L, 9L, 7L, 5L), .Dim = c(8L, 2L), 
                    .Dimnames = list(c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8"), NULL)), 
    edge.length = c(0.458192227, 0.458192227, 0.455310462, 0.455310462, 
    0.2224209486, 0.2195391837, 0.6541055961, 1.331837007), Nnode = 4L, 
    tip.label = c("s1", "s2", "s3", "s4", "s5"), node.label = 6:9), 
    .Names = c("edge", "edge.length", "Nnode", "tip.label", "node.label"), 
    class = "phylo", order = "postorder", seed = 3315337.05385891)
plot(tr)
slidify('index.Rmd')
tr
tr.v
vcv(tr)
a = vcv(tr)
a
names(a)
apply(a, 1, paste, collapse = " & ")
as.charcter(apply(a, 1, paste, collapse = " & "))
as.character(apply(a, 1, paste, collapse = " & "))
args(edgelabels)
tr$edge
tr$edge.length
slidify('index.Rmd')
args(edgelabels)
slidify('index.Rmd')
tr$tip.label
as.character(apply(a, 1, paste, collapse = " & "))args
as.character(apply(a, 1, paste, collapse = " & "))
as.character(apply(round(a, 3), 1, paste, collapse = " & "))
message(as.character(apply(round(a, 3), 1, paste, collapse = " & ")))
message(as.character(apply(round(a, 3), 1, function(x) paste(paste(x, collapse = " & "), "\\"))))
message(as.character(apply(round(a, 3), 1, function(x) paste(paste(x, collapse = " & "), "\\\\"))))
message(as.character(apply(round(a, 3), 1, function(x) paste(paste(x, collapse = " & "), "\\\\\n"))))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
tr.c
tr.v
vcv(tr)
solve(vcv(tr))
round(solve(vcv(tr)))
library(magrittr)
round(solve(vcv(tr)),3)
round(solve(vcv(tr)),3) %>%
apply(., 1, paste, collapse = " & ") %>%
paste(., '\\\\\n', sep = '') %>%
message
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(ape)
args(tiplabels)
colSums(solve(vcv(tr)))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
solve(tr.c)
solve(tr.v)
solve(tr.v) %*% tr.v
tr.v %*% tr.v
tr.v %*% solve(tr.v)
round(tr.v %*% solve(tr.v), 3)
round(tr.v %*% solve(tr.v), 10)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
tr.w <- colSums(solve(vcv(tr)))
plot.phylo(tr, show.tip.label = FALSE)
tiplabels(pch = 19, cex = 3 * (tr.w - min(tr.w) + 1) / max(3*(tr.w - min(tr.w) + 1)))
3 * (tr.w - min(tr.w) + 1) / max(3*(tr.w - min(tr.w) + 1))
3 * (tr.w - min(tr.w) + 1) / max(1*(tr.w - min(tr.w) + 1))
3 * (tr.w - min(tr.w) + 1) / max(tr.w - min(tr.w) + 1)
(tr.w - min(tr.w) + 1) / max(tr.w - min(tr.w) + 1)
1+ (min(tr.w) - 1) * (3 - 1) / (max(tr.w) - min(tr.w)
)
drew)
library(scales)
rescale
rescale(tr.w, from = 1, to = 3)
tr
rescale(tr.w, to = c(1, 3))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
q()
library(slidify)
slidify('index.Rmd')
q()
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(nlme)
dmvnorm
library(mvtnorm)
dmvnorm
dmvnorm
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
library(geiger)
?sim.char
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
q()
library(gridExtra)
library(gpplot2)
library(ggplot2)
library(ggplot2, gridExtra)
library(ape, geiger)
library(geiger)
library(magrittr) # for formatting data
tr2 <- sim.bdtree(n = 50) # simulate a 50-tip birth-death bdtree...
# ... and two characters with r = 0.3, mean = 10
dat <- sim.char(tr2, par = matrix(c(1, 0.3, 0.3, 1), 2, 2), root = 10) %>%
  as.data.frame(.) %>%
  names(.) <- c('x', 'y')
dat <- sim.char(tr2, par = matrix(c(1, 0.3, 0.3, 1), 2, 2), root = 10) %>%
  as.data.frame(.)
names(dat) <- c('x', 'y')
dat
head(dat)
library(ggplot2, gridExtra)
dat.pic <- data.frame(x = pic(dat$x, tr2), y = pic(dat$y, tr2))
p1 <- qplot(x, y, data = dat.pic) + geom_smooth(method = 'lm') + ggtitle('Independent contrasts')
p2 <- qplot(x, y, data = dat) + geom_smooth(method = 'lm') + ggtitle('Raw data')
grid.arrange(p1, p2, nrow = 1)
getwd()
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
library(nlme)
args(gls)
args(corBrownian)
library(nlme, ape)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
lapply(dat.fits, summary)
lapply(dat.fits, coef)
sapply(dat.fits, coef)
library(nlme, ape)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
summary(dat.fits$gls)
slidify('index.Rmd')
q()
library(ape)
pic(dat$x, tr2)
row.names(dat)
tr2$tip.label
tr2$tip.label == row.names(dat)
sapply(dat.fits, coef)
library(nlme, ape)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x - 1, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
```dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x - 0, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x - 0, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
sapply(dat.fits, coef)dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x - 1, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x - 1, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pic = lm(y ~ x + 0, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corPagel(phy = tr2)),
  pic = lm(y ~ x + 0, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
dat.fits$gls
args(corPagel)
args(corBrownian)
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr2)),
  pic = lm(y ~ x + 0, data = dat.pic),
  ols = lm(y ~ x, data = dat)
  )
sapply(dat.fits, coef)
dat.fits$gls
args(corBrownian)
?corBrownian
??origin
dat.fits <- list(
  gls = gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = tr2)),
  pic = lm(y ~ x + 0, data = dat.pic),
  ols = lm(y ~ x, data = dat),
  pic2 = lmorigin(y ~ x, data = dat.pic)
  )
sapply(dat.fits, coef)
dat.fits$pic2
sapply(dat.fits, coef)
library(slidify)
slidify('index.Rmd')
dat.fits$pic
dat.fits$pic$coefficients
dat.fits$pic$coefficients = c(NA, dat.fits$pic$coefficients)
sapply(dat.fits, coef)
slidify('index.Rmd')
slidify('index.Rmd')
dat
jitter(dat)
rescaleTree(tr2, 'lambda', 0)
args(rescaleTree)
?rescaleTree
rescale(tr2, 'lambda', 0)
library(geiger)
rescale(tr2, 'lambda', 0)
lambdaTree(tr2, 0)
geiger:::rescale.phylo(tr2, 'lambda', 0)
plot(geiger:::rescale.phylo(tr2, 'lambda', 0))
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
tr3 <- tr2
tr3$tip.label <- sample(tr3$tip.label) # randomizes tip label order
## create rescaled trees from 0 to 1, where 0 is no phylogenetic structure, 1 is original:
tr2.set <- lapply(seq(from = 0, to = 1, by = 0.05),
                 function(x) geiger:::rescale.phylo(tr2, 'lambda', x))
tr3.set <- lapply(seq(from = 0, to = 1, by = 0.05),
                 function(x) geiger:::rescale.phylo(tr3, 'lambda', x))
## and now fit all the models:
dat.fits2 <- list(
                   gls = sapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd))),
                   gls.rnd = sapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd)))
                   )
sapply(dat.fits2$gls, logLik)
sapply(dat.fits2$gls, aic)
sapply(dat.fits2$gls, AIC)
dat.fits2$gls
dat.fits2 <- list(
                   gls = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd))),
                   gls.rnd = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd)))
                   )
sapply(dat.fits2$gls, logLik)
tr3 <- tr2
tr3$tip.label <- sample(tr3$tip.label) # randomizes tip label order
## create rescaled trees from 0 to 1, where 0 is no phylogenetic structure, 1 is original:
tr2.set <- lapply(seq(from = 0, to = 1, by = 0.02),
                 function(x) geiger:::rescale.phylo(tr2, 'lambda', x))
tr3.set <- lapply(seq(from = 0, to = 1, by = 0.02),
                 function(x) geiger:::rescale.phylo(tr3, 'lambda', x))
## and now fit all the models:
dat.fits2 <- list(
                   gls = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd))),
                   gls.rnd = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd)))
                   )
plot(sapply(dat.fits2$gls, logLik), 'l')
plot(sapply(dat.fits2$gls, logLik), type='l')
plot(sapply(dat.fits2$gls.rnd, logLik), type='l')
dat.fits2 <- list(
                   gls = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd))),
                   gls.rnd = lapply(tr3.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd)))
                   )
plot(sapply(dat.fits2$gls.rnd, logLik), type='l')
names(tr3)
names(tr3.set)
length(tr3.set)
as.character(seq(from = 0, to = 1, by = 0.02))
tr3 <- tr2
tr3$tip.label <- sample(tr3$tip.label) # randomizes tip label order
## create rescaled trees from 0 to 1, where 0 is no phylogenetic structure, 1 is original:
tr2.set <- lapply(seq(from = 0, to = 1, by = 0.02),
                 function(x) geiger:::rescale.phylo(tr2, 'lambda', x))
tr3.set <- lapply(seq(from = 0, to = 1, by = 0.02),
                 function(x) geiger:::rescale.phylo(tr3, 'lambda', x))
names(tr2.set) <- names(tr3.set) <- as.character(seq(from = 0, to = 1, by = 0.02))
## and now fit all the models:
dat.fits2 <- list(
                   gls = lapply(tr2.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd))),
                   gls.rnd = lapply(tr3.set, function(trInd)
                     gls(y ~ x, data = dat, correlation = corBrownian(value = 1, phy = trInd)))
                   )
layout(matrix(1:3), 1)
for(i in c("0", "0.5", "1")) plot(tr2.set[[i]], show.tip.label = F, main = paste('lambda =', i))
layout(matrix(1:3, 1))
for(i in c("0", "0.5", "1")) plot(tr2.set[[i]], show.tip.label = F, main = paste('lambda =', i))
lambdaVals <- seq(from = 0, to = 1, by = 0.02)
tr2.lnL <- data.frame(lambda = lambdaVals, lnL = sapply(dat.fits2$gls, logLik))
tr3.lnL <- data.frame(lambda = lambdaVals, lnL = sapply(dat.fits2$gls.rnd, logLik))
tr2.lnL
plot(tr2.lnL <- data.frame(lambda = lambdaVals, lnL = sapply(dat.fits2$gls, logLik))
tr3.lnL <- data.frame(lambda = lambdaVals, lnL = sapply(dat.fits2$gls.rnd, logLik))
plot(tr2.lnL)
plot(tr2.lnL, type = 'l')
abline(h = max(tr2.lnL$lnL) - 2, lty = 'dashed')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
tr3.glsAlt <- list(
  brown = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr3)),
  pagel = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr3)),
  )
sapply(tr3.glsAlt, coef)
sapply(tr3.glsAlt, param)tr3.glsAlt <- list(
  brown = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr3)),
  pagel = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr3))
  )
sapply(tr3.glsAlt, coef)
sapply(tr3.glsAlt, param)
tr3.glsAlt <- list(
  brown = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr3)),
  pagel = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr3))
  )
sapply(tr3.glsAlt, coef)
sapply(tr3.glsAlt, param)
sapply(tr3.glsAlt, coef) %>% t
tr3.glsAlt$brown$parAssign
tr3.glsAlt$pagel$parAssign
tr3.glsAlt$pagel$apVar
attribuestr3.glsAlt$pagel)
attributes(tr3.glsAlt$pagel)
tr3.glsAlt$pagel$modelStruct
tr3.glsAlt$brown$modelStruct
trs.glsAlt <- list(
  brown.rnd = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr3)),
  pagel.rnd = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr3)),
  brown.raw = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pagel.raw = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr2))
  )
sapply(trs.glsAlt, coef) %>% t
trs.glsAlt <- list(
  brown.rnd = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr3)),
  pagel.rnd = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr3)),
  brown.raw = gls(y ~ x, data = dat, correlation = corBrownian(phy = tr2)),
  pagel.raw = gls(y ~ x, data = dat, correlation = corPagel(value = 1, phy = tr2))
  )
sapply(trs.glsAlt, coef) %>% t
trs.glsAlt$pagel.rnd$modelStruct
trs.glsAlt$pagel.raw$modelStruct
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
trs.glsAlt$pagel.rnd$modelStruct
as.numeric(trs.glsAlt$pagel.rnd$modelStruct)
trs.glsAlt$pagel.raw$modelStruct
round(trs.glsAlt$pagel.raw$modelStruct)
paste('shuffled data lambda =', trs.glsAlt$pagel.rnd$modelStruct,
      '\nraw data lambda =', trs.glsAlt$pagel.raw$modelStruct) %>%
message
slidify('index.Rmd')
slidify('index.Rmd')
q()
